
parser combinator
  
example of airthmetic parser rule:
 
```
expr : <term> + <expr> <|> <term>
term : <fact> * <term> <|> <fact>
fact : (<expr>) <|> <int>
```
using `<_>` denotes a sub-parser 

EX:
 
to parse (1 + 2) * 3
 
match `expr` 
| -> match `term`
| | -> match `fact`
| | # -> match (
| | | -> match `expr`
| | | | -> match `term`
| | | | | -> match `fact`
| | # | | | -> match `int` (1)
| | # | -> match +
| | | | -> match `term`
| | | | | -> match `fact`
| | # | | | -> match `int` (2)
| | | -> match )
# -> match *
| -> match `fact`
# | -> `int` (3)
 

lisp parser?

term : ( expr args ) | expr
expr : term  | expr
term : ident | num
args : some expr 
